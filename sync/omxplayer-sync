#!/usr/bin/env python
#
# omxplayer-sync
#
# Copyright 2014, Simon Josi
# Simon Josi me(at)yokto(dot)net
#
# This program is free software; you can redistribute 
# it and/or modify it under the terms of the GNU 
# General Public License version 3 as published by 
# the Free Software Foundation.
#

import re
import os
import sys
import math
import socket
import signal
import pexpect
import dbus
import collections
import threading
from time import sleep, time
from optparse import OptionParser, BadOptionError, AmbiguousOptionError

TOLERANCE = .1
SYNC_OFFSET = .2
OMXPLAYER = 'omxplayer'
OMXPLAYER_REGEX_STATUS = re.compile(r"M:\s*(\d+) ")
OMXPLAYER_REGEX_DONE = re.compile(r"have a nice day.*")
OMXPLAYER_DBUS_ADDR='/tmp/omxplayerdbus'
PORT = 1666

#
# Unknown option pass-through OptionParser
#
class PassThroughOptionParser(OptionParser):
    """
    An unknown option pass-through implementation of OptionParser.

    When unknown arguments are encountered, bundle with largs and try again,
    until rargs is depleted.  

    sys.exit(status) will still be called if a known argument is passed
    incorrectly (e.g. missing arguments or bad argument types, etc.)        
    """
    def _process_args(self, largs, rargs, values):
        while rargs:
            try:
                OptionParser._process_args(self,largs,rargs,values)
            except (BadOptionError,AmbiguousOptionError), e:
                largs.append(e.opt_str)

#
# D-Bus player interface
#
class PlayerInterface():
    def _get_dbus_interface(self):
        try:
            bus = dbus.bus.BusConnection(
                open(OMXPLAYER_DBUS_ADDR).readlines()[0].rstrip())
            proxy = bus.get_object(
                'org.mpris.MediaPlayer2.omxplayer',
                '/org/mpris/MediaPlayer2',
                introspect=False)
            self.interface = dbus.Interface(
                proxy, 'org.mpris.MediaPlayer2.Player')
        except Exception, e:
            print "WARNING: dbus connection could not be established"
            print e
            sleep(5)
            return False
        
        return True

    def initialize(self):
        sleep(1) # wait for omxplayer to appear on dbus
        return self._get_dbus_interface()

    def playPause(self):
        try:
            self.interface.Action(16)
        except:
            return False

        return True

    def setPosition(self, seconds):
        try:
            self.interface.SetPosition(
                dbus.ObjectPath('/not/used'),
                long(seconds * 1000000))
        except:
            return False

        return True

#
# OMXPlayer-Sync main class
#
class OMXPlayerSync():
    def __init__(self):
        self.sock = self.init_socket()
        self.controller = PlayerInterface()

        self.options = None
        self.omxplayer_options = []
        self.playlist = []
        self.playlist_index = 0
        self.filename = ''
        self.position_local = 0.0
        self.position_local_oldage = 0.0
        self.position_local_oldage_count = 0
        self.position_master = 0.0
        self.filename_master = ''
        self.process = None
        self.first_run = True

        signal.signal(signal.SIGINT, self.kill_omxplayer_and_exit)

    def run(self):
        p = PassThroughOptionParser()
        p.add_option('--master', '-m', action='store_true')
        p.add_option('--slave', '-l', action='store_true')
        p.add_option('--destination', '-x', default='255.255.255.255')
        p.add_option('--loop', '-u', action='store_true')
        p.add_option('--verbose', '-v', action='store_true')
        p.add_option('--adev', '-o', default='both')
        self.options, arguments = p.parse_args()

        for argument in arguments:
            if argument.startswith('-'):
                self.omxplayer_options.append(argument)
            else:
                self.playlist.append(argument)

        if not len(self.playlist):
            sys.exit(0)

        if not filter(lambda x: os.path.isfile(x), self.playlist):
            print "ERROR: none of the supplied filenames are found"
            sys.exit(1)
        
        self.omxplayer_options.append("-o %s" % self.options.adev)
        
        if not self.options.verbose:
            self.omxplayer_options.append('--no-osd')

        if self.options.master:
            self.socket_enable_broadcast()
            self.socket_connect(self.options.destination)

        if self.options.slave:
            read_thread = threading.Thread(target=self.read_position_master)
            read_thread.daemon = True
            read_thread.start()
            sleep(0.5)
            self.set_playlist_index()

        while True:
            self.play_file(self.playlist[self.playlist_index])
            if not self.first_run and not self.options.loop and self.playlist_index == 0:
                break

            self.first_run = False

    def play_file(self, filename):
        if not os.path.isfile(filename):
            if  self.options.verbose:
                print "WARNING: %s file not found" % filename
            return

        self.filename = filename
        self.position_local = 0.0
        self.position_local_oldage = 0.0
        self.position_local_oldage_count = 0

        if self.options.verbose:
            last_frame_local, current_frame_local = 0, 0
            if self.options.slave:
                last_frame_master, current_frame_master = 0, 0

        if self.options.master:
            self.send_position_local()
            sleep(TOLERANCE*2)

        self.process = pexpect.spawn(timeout=0.00005, maxread=64,
            command='%s -s --no-keys %s %s' % (
                OMXPLAYER, ' '.join(self.omxplayer_options), self.filename))

        if not self.read_position_local():
            print "WARNING: omxplayer did not start. Try to test with `omxplayer -s OPTIONS`"
            self.kill_omxplayer_and_exit()

        self.controller.initialize()

        if self.options.slave:
            sync_grace_time = 1.0
            wait_for_sync = False
            wait_after_sync = True
            deviations = collections.deque(maxlen=50)

        while True:
            if not self.read_position_local():
                self.increment_playlist_index()
                break

            if self.hangup_detected():
                if self.options.slave:
                    self.set_playlist_index()
                print "WARNING: omxplayer hangup detected, respawning omxplayer"
                break

            if self.options.verbose:
                current_frame_local = math.modf(self.position_local)[0]*100/4
                if self.options.slave:
                    current_frame_master = math.modf(self.position_master)[0]*100/4

            if self.options.master:
                self.send_position_local()
                if self.options.verbose:
                    if current_frame_local != last_frame_local:
                        sys.stdout.write("local: %.2f %.0f\n" % (
                            self.position_local, math.modf(self.position_local)[0]*100/4))
                        last_frame_local = current_frame_local

            if self.options.slave:
                if self.filename != self.filename_master:
                    self.set_playlist_index()
                    break

                deviation = self.position_master - self.position_local
                deviations.append(deviation)
                moving_deviation = sum(list(deviations)) / float(len(list(deviations)))
                
                if self.options.verbose:
                    if current_frame_local != last_frame_local \
                    or current_frame_master != last_frame_master:
                        sys.stdout.write("local: %.2f %.0f master: %.2f %.0f deviation: %.2f moving_deviation: %.2f filename: %s filename_master: %s wait: %r" % (
                            self.position_local, current_frame_local, self.position_master, current_frame_master, deviation, moving_deviation, self.filename, self.filename_master, wait_for_sync))
                        last_frame_local = current_frame_local
                        last_frame_master = current_frame_master

                if wait_for_sync:
                    small_moving_deviation = sum(list(deviations)[-5:]) / float(len(list(deviations)[-5:]))
                    if small_moving_deviation >= -SYNC_OFFSET \
                    and small_moving_deviation < -SYNC_OFFSET + .5:
                        if self.options.verbose:
                            print "we are sync, play..."
                        if not self.controller.playPause():
                            break

                        wait_for_sync = False
                        wait_after_sync = time()

                    continue

                if wait_after_sync:
                    if (time() - wait_after_sync) > 5:
                         wait_after_sync = False

                    continue

                if abs(moving_deviation) > TOLERANCE \
                and self.position_local > sync_grace_time \
                and self.position_master > sync_grace_time:
                    if self.position_local < self.position_master:
                        if self.options.verbose:
                            print "jump to %.2f" % (self.position_master + 2)
                        if not self.controller.setPosition(self.position_master + 2):
                            break

                        sleep(0.1)

                    if self.options.verbose:
                        print "enter pause..."

                    if not self.controller.playPause():
                        break

                    wait_for_sync = True

        self.kill_omxplayer()

    def read_position_local(self):
        eof = False
        while True:
            index = self.process.expect([
                OMXPLAYER_REGEX_STATUS,
                pexpect.TIMEOUT,
                pexpect.EOF,
                OMXPLAYER_REGEX_DONE,
            ])
            if index == 1:
                sleep(0.01)
                break
            elif index in (2,3):
                if self.options.verbose:
                    print "omxplayer has ended..."
                eof = True
                break
            else:
                self.position_local = (float(self.process.match.group(1)) / 1000000)

        return not eof

    def set_playlist_index(self):
        if self.filename_master == '':
            print "WARNING: unable to get current filename from master"
            sleep(5)
            return
            
        try:
            self.playlist_index = self.playlist.index(self.filename_master)
        except:
            print "WARNING: current master file '%s' is unavailable" % self.filename_master

    def increment_playlist_index(self):
        if len(self.playlist) == (self.playlist_index + 1):
            self.playlist_index = 0
        else:
            self.playlist_index += 1

    def hangup_detected(self):
        self.position_local_oldage_count += 1
        if self.position_local_oldage_count == 200:
            if self.position_local_oldage == self.position_local:
                return True

            self.position_local_oldage = self.position_local
            self.position_local_oldage_count = 0

        return False

    def init_socket(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
        sock.bind(('0.0.0.0', PORT))
        return sock

    def kill_omxplayer(self):
         try:
             os.kill(-self.process.pid, 15)
         except:
             pass
         try:
             self.process.kill(15)
         except:
             pass

    def kill_omxplayer_and_exit(self, signum, frame):
        self.kill_omxplayer()
        sys.exit(0)

    #
    # master specific
    #
    def socket_enable_broadcast(self):
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)

    def socket_connect(self, destination):
        try:
            self.sock.connect((destination, PORT))
        except:
            print "connect: Network is unreachable"
            pass

    def send_position_local(self):
        try:
            self.sock.send('%s%%%s' % (str(self.position_local), self.filename))
        except socket.error:
            pass

    #
    # slave specific
    #
    def read_position_master(self):
        while True:
            data = self.sock.recvfrom(1024)[0].split('%', 1)
            self.position_master = float(data[0])
            self.filename_master = data[1]

if __name__ == '__main__':
    OMXPlayerSync().run()